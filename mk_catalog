#!/usr/bin/env python
from typing import List

import requests
from bs4 import BeautifulSoup as bSoup

URL = 'https://reveng.sourceforge.io/crc-catalogue/all.htm'

BEGIN = rf"""/**
    \file catalog.h
    \brief <a href="{URL}">Перечень</a> всех стандартных и общепринятых
    CRC алгоритмов шириной вплоть до 128 бит
*/
#ifndef H_CRC_CATALOG
#define H_CRC_CATALOG

#include <stdbool.h>
// clang-format off
//                                               Width              Poly                Init  RefIn  RefOut              XorOut              Check
"""

END = r"""// clang-format on
#endif // H_CRC_CATALOG
"""

def str2bool(s: str) -> bool:
    if s.lower() == 'true':
        return True
    return False

class Algo(object):
    def __init__(self, header: str, params: str, desc: str) -> None:
        self.name = header.replace('CRC-', 'CRC').replace('-', '_').replace('/', '_')

        params = params[0:params.find('residue')]
        params = params.split()

        self.width = int(params[0].split('=')[1])
        self.poly = int(params[1].split('=')[1], base=16)
        self.init = int(params[2].split('=')[1], base=16)
        self.refin = str2bool(params[3].split('=')[1])
        self.refout = str2bool(params[4].split('=')[1])
        self.xorout = int(params[5].split('=')[1], base=16)
        self.check = int(params[6].split('=')[1], base=16)

        if self.width <= 8:
            self.actual_width = 8
        elif self.width <= 16:
            self.actual_width = 16
        elif self.width <= 32:
            self.actual_width = 32
        elif self.width <= 64:
            self.actual_width = 64
        elif self.width <= 128:
            self.actual_width = 128
        else:
            self.actual_width = -1

        # handle aliases
        self.aliases = []
        for d in desc:
            if 'Alias' in d:
                d = d[7:]
                aliases = d.split(', ')

                for alias in aliases:
                    if '/' in alias:
                        alias = alias.replace('CRC-', 'CRC').replace('-', '_').replace('/', '_')
                        self.aliases.append(alias)

    def __str__(self) -> str:
        ret = f'#define {self.name:23} ('

        if self.actual_width == 8:
            ret += '( Crc8BasedAlgo)'
        elif self.actual_width == 16:
            ret += '(Crc16BasedAlgo)'
        elif self.actual_width == 32:
            ret += '(Crc32BasedAlgo)'
        elif self.actual_width == 64:
            ret += '(Crc64BasedAlgo)'
        elif self.actual_width == 128:
            ret += '(Crc128BasedAlgo)'
        else:
            return None

        ret += f'{{{self.width:>2},'

        if self.actual_width == 128:
            align = (self.width - 64) // 4 + bool((self.width - 64) % 4)
            mask = (1 << 65) - 1
            ret += f'  (__uint128_t)0x{self.poly >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.poly & mask:016X}, \\\n'

            ret += f'{' ':56}'
            ret += f'(__uint128_t)0x{self.init >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.init & mask:016X}, \\\n'

            ret += f'{' ':56}'
            ret += f'{str(self.refin).lower()}, {str(self.refout).lower()}, \\\n'

            ret += f'{' ':56}'
            ret += f'(__uint128_t)0x{self.xorout >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.xorout & mask:016X}, \\\n'

            ret += f'{' ':56}'
            ret += f'(__uint128_t)0x{self.check >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.check & mask:016X}}})\n'
        else:
            align = self.width // 4 + bool(self.width % 4)
            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.poly:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.init:0{align}X},'

            ret += f'{str(self.refin).lower():>6},'
            ret += f'{str(self.refout).lower():>6},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.xorout:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.check:0{align}X}}})\n'

        for alias in self.aliases:
            ret += f'#define {alias:23} {self.name}\n'

        return ret

    def is_valid(self) -> bool:
        return self.actual_width != -1

    def str_test(self) -> str:
        return f'    crc_test({self.name}, {self.actual_width});\n'

    def str_md(self) -> str:
        ret = f'|`{self.name}`|`{self.width}`|'
        align = self.width // 4 + bool(self.width % 4)
        ret += f'`0x{self.poly:0{align}X}`|'
        ret += f'`0x{self.init:0{align}X}`|'
        ret += f'`{str(self.refin).lower()}`|'
        ret += f'`{str(self.refout).lower()}`|'
        ret += f'`0x{self.xorout:0{align}X}`|'
        ret += f'`0x{self.check:0{align}X}`|'
        for alias in self.aliases:
            ret += f'`{alias}`, '
        if len(self.aliases):
            ret = ret[:-2]

        ret += '|\n'
        return ret

    def str_cxx(self) -> str:
        ret = f'using {self.name:23} = Crc<'

        if self.actual_width == 8:
            ret += ' uint8_t, '
        elif self.actual_width == 16:
            ret += 'uint16_t, '
        elif self.actual_width == 32:
            ret += 'uint32_t, '
        elif self.actual_width == 64:
            ret += 'uint64_t, '
        elif self.actual_width == 128:
            ret += '__uint128_t, '
        else:
            return None

        ret += f'{self.width:>2},'

        if self.actual_width == 128:
            align = (self.width - 64) // 4 + bool((self.width - 64) % 4)
            mask = (1 << 65) - 1
            ret += f'\n{' ':35}'
            ret += f'(__uint128_t)0x{self.poly >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.poly & mask:016X},\n'

            ret += f'{' ':35}'
            ret += f'(__uint128_t)0x{self.init >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.init & mask:016X},\n'

            ret += f'{' ':35}'
            ret += f'{str(self.refin).lower()}, {str(self.refout).lower()},\n'

            ret += f'{' ':35}'
            ret += f'(__uint128_t)0x{self.xorout >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.xorout & mask:016X},\n'

            ret += f'{' ':35}'
            ret += f'(__uint128_t)0x{self.check >> 64:0{align}X} << 64 |'
            ret += f' 0x{self.check & mask:016X}>;\n'
        else:
            align = self.width // 4 + bool(self.width % 4)
            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.poly:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.init:0{align}X},'

            ret += f'{str(self.refin).lower():>6},'
            ret += f'{str(self.refout).lower():>6},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.xorout:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.check:0{align}X}>;\n'

        for alias in self.aliases:
            ret += f'using {alias:23} = {self.name};\n'

        return ret

test_algos: List[Algo] = []

resp = requests.get(URL, verify=False)
resp.raise_for_status()

soup = bSoup(resp.content, 'html.parser')
links = soup.find_all('h3')

for link in links:
    header = link.text
    if 'CRC' in header:
        params = link.find_next('p').text
        desc = link.find_next('ul').text.split('\n')
        algo = Algo(header, params, desc)

        if algo.is_valid():
            test_algos.append(algo)


flag128 = False
with open('include/crc/catalog.h', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#ifdef __SIZEOF_INT128__\n')

        f.write(str(algo))

    if flag128:
        f.write('#endif\n')

    f.write(END)


# CREATE crc_test.c

TEST_BEGIN = r"""#include "crc_test.h"

int errors = 0;
int passed = 0;

int main(void) {
"""

TEST_END = r"""
    int percents = 100 * passed / (passed + errors);
    printf("[%d%%] tests passed, %d errors\n", percents, errors);

    return 0;
}
"""

flag128 = False
with open('test/crc_test.c', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(TEST_BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#ifdef __SIZEOF_INT128__\n')

        f.write(algo.str_test())

    if flag128:
        f.write('#endif\n')

    f.write(TEST_END)


# CREATE CATALOG.md

MD_BEGIN = rf"""### Спецификации алгоритмов
Каталог алгоритмов взят отсюда: {URL}

| Name | Width | Poly | Init | RefIn | RefOut | XorOut | Check | Aliases |
| ---- | ----: | ---: | ---: | ----: | -----: | -----: | ----: | ------- |
"""

with open('CATALOG.md', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(MD_BEGIN)

    for algo in test_algos:
        f.write(algo.str_md())


# create cxx lib

CXX_BEGIN = rf"""/**
    \file catalog.hpp
    \brief <a href="{URL}">Перечень</a> всех стандартных и общепринятых
    CRC алгоритмов шириной вплоть до 128 бит
*/
#ifndef HPP_CRC_CATALOG
#define HPP_CRC_CATALOG

#include "crc.hpp"
// clang-format off
namespace crc {{
//                                ValueType  Width              Poly                Init  RefIn RefOut              XorOut               Check
"""

CXX_END = r"""} // namespace crc
// clang-format on

#endif // HPP_CRC_CATALOG
"""


flag128 = False
with open('include/crcxx/catalog.hpp', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(CXX_BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#ifdef __SIZEOF_INT128__\n')

        f.write(algo.str_cxx())

    if flag128:
        f.write('#endif\n')

    f.write(CXX_END)

# CREATE crc_test.cpp

CXX_TEST_BEGIN = r"""#include "crcxx_test.hpp"
#include "crcxx/catalog.hpp"

using namespace crc;

int errors = 0;
int passed = 0;

int main(void) {
"""

CXX_TEST_END = r"""
    int percents = 100 * passed / (passed + errors);
    printf("[%d%%] tests passed, %d errors\n", percents, errors);

    return 0;
}
"""

flag128 = False
with open('test/crcxx_test.cpp', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(CXX_TEST_BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#ifdef __SIZEOF_INT128__\n')

        f.write(algo.str_test())

    if flag128:
        f.write('#endif\n')

    f.write(CXX_TEST_END)

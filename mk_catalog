#!/usr/bin/env python
from typing import List

import requests
import urllib3
from bs4 import BeautifulSoup as bSoup

URL = 'https://reveng.sourceforge.io/crc-catalogue/all.htm'


def str2bool(s: str) -> bool:
    if s.lower() == 'true':
        return True
    return False


class Algo(object):
    def __init__(self, header: str, params: str, desc: str) -> None:
        self.name = header.replace('CRC-', 'CRC').replace('-', '_').replace('/', '_')

        params = params.split()

        self.width = int(params[0].split('=')[1])
        self.poly = int(params[1].split('=')[1], base=16)
        self.init = int(params[2].split('=')[1], base=16)
        self.refin = str2bool(params[3].split('=')[1])
        self.refout = str2bool(params[4].split('=')[1])
        self.xorout = int(params[5].split('=')[1], base=16)
        self.check = int(params[6].split('=')[1], base=16)
        self.residue = int(params[7].split('=')[1], base=16)

        if self.width <= 8:
            self.actual_width = 8
        elif self.width <= 16:
            self.actual_width = 16
        elif self.width <= 32:
            self.actual_width = 32
        elif self.width <= 64:
            self.actual_width = 64
        elif self.width <= 128:
            self.actual_width = 128
        else:
            self.actual_width = -1

        # handle aliases
        self.aliases = []
        for d in desc:
            if 'Alias' in d:
                d = d[7:]
                aliases = d.split(', ')

                for alias in aliases:
                    if '/' in alias:
                        alias = alias.replace(
                            'CRC-', 'CRC').replace('-', '_').replace('/', '_')
                        self.aliases.append(alias)

    def is_valid(self) -> bool:
        return self.actual_width != -1

    def str_c(self) -> str:
        ret = f'#define {self.name:23} '

        mask = (1 << 32) - 1
        if self.actual_width == 128:
            ret += f'{self.width:>3},'

            ret += f' CRC_UINT128_C(0x{self.poly >> 96:08X},'
            ret += f' 0x{(self.poly >> 64) & mask:08X},'
            ret += f' 0x{(self.poly >> 32) & mask:08X},'
            ret += f' 0x{self.poly & mask:08X}),\\\n'

            ret += f'{' ':36}'
            ret += f' CRC_UINT128_C(0x{self.init >> 96:08X},'
            ret += f' 0x{(self.init >> 64) & mask:08X},'
            ret += f' 0x{(self.init >> 32) & mask:08X},'
            ret += f' 0x{self.init & mask:08X}),\\\n'

            ret += f'{' ':36}'
            ret += f' {int(self.refin)}, {int(self.refout)},\\\n'

            ret += f'{' ':36}'
            ret += f' CRC_UINT128_C(0x{self.xorout >> 96:08X},'
            ret += f' 0x{(self.xorout >> 64) & mask:08X},'
            ret += f' 0x{(self.xorout >> 32) & mask:08X},'
            ret += f' 0x{self.xorout & mask:08X}),\\\n'

            ret += f'{' ':36}'
            ret += f' CRC_UINT128_C(0x{self.check >> 96:08X},'
            ret += f' 0x{(self.check >> 64) & mask:08X},'
            ret += f' 0x{(self.check >> 32) & mask:08X},'
            ret += f' 0x{self.check & mask:08X}),\\\n'

            ret += f'{' ':36}'
            ret += f' CRC_UINT128_C(0x{self.residue >> 96:08X},'
            ret += f' 0x{(self.residue >> 64) & mask:08X},'
            ret += f' 0x{(self.residue >> 32) & mask:08X},'
            ret += f' 0x{self.residue & mask:08X})\n'
        elif self.actual_width == 64:
            ret += f'{self.width:>2},'

            ret += f' CRC_UINT64_C(0x{self.poly >> 32:08X},'
            ret += f' 0x{self.poly & mask:08X}),'

            ret += f' CRC_UINT64_C(0x{self.init >> 32:08X},'
            ret += f' 0x{self.init & mask:08X}),'

            ret += f' {int(self.refin)}, {int(self.refout)},\\\n'

            ret += f'{' ':35}'
            ret += f' CRC_UINT64_C(0x{self.xorout >> 32:08X},'
            ret += f' 0x{self.xorout & mask:08X}),'

            ret += f' CRC_UINT64_C(0x{self.check >> 32:08X},'
            ret += f' 0x{self.check & mask:08X}),'

            ret += f' CRC_UINT64_C(0x{self.residue >> 32:08X},'
            ret += f' 0x{self.residue & mask:08X})\n'
        else:
            align = self.width // 4 + bool(self.width % 4)
            ret += f'{self.width:>2},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.poly:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.init:0{align}X},'

            ret += f' {int(self.refin)},'
            ret += f' {int(self.refout)},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.xorout:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.check:0{align}X},'

            ret += f'{' ':>{17 - align}}'
            ret += f'0x{self.residue:0{align}X}\n'

        for alias in self.aliases:
            ret += f'#define {alias:23} {self.name}\n'

        return ret

    def str_test(self) -> str:
        return f'    crc_test({self.name}, {self.actual_width});\n'

    def str_md(self) -> str:
        ret = f'|`{self.name}`|`{self.width}`|'
        align = self.width // 4 + bool(self.width % 4)
        ret += f'`0x{self.poly:0{align}X}`|'
        ret += f'`0x{self.init:0{align}X}`|'
        ret += f'`{str(self.refin).lower()}`|'
        ret += f'`{str(self.refout).lower()}`|'
        ret += f'`0x{self.xorout:0{align}X}`|'
        ret += f'`0x{self.check:0{align}X}`|'
        ret += f'`0x{self.residue:0{align}X}`|'
        for alias in self.aliases:
            ret += f'`{alias}`, '
        if len(self.aliases):
            ret = ret[:-2]

        ret += '|\n'
        return ret


################################################################################
#                              Create object list                              #
################################################################################
test_algos: List[Algo] = []

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
resp = requests.get(URL, verify=False)
resp.raise_for_status()

soup = bSoup(resp.content, 'html.parser')
links = soup.find_all('h3')

for link in links:
    header = link.text
    if 'CRC' in header:
        params = link.find_next('p').text
        desc = link.find_next('ul').text.split('\n')
        algo = Algo(header, params, desc)

        if algo.is_valid():
            test_algos.append(algo)

################################################################################
#                              Create CATALOG.md                               #
################################################################################
MD_BEGIN = rf"""### Спецификации алгоритмов
Каталог алгоритмов взят отсюда: {URL}

| Name | Width | Poly | Init | RefIn | RefOut | XorOut | Check | Residue | Aliases |
| ---- | ----: | ---: | ---: | ----: | -----: | -----: | ----: | ------: | ------- |
"""

with open('CATALOG.md', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(MD_BEGIN)

    for algo in test_algos:
        f.write(algo.str_md())

################################################################################
#                               Create catalog.h                               #
################################################################################
BEGIN = rf"""/**
    \file catalog.h
    \brief <a href="{URL}">Перечень</a> всех стандартных и общепринятых
    CRC алгоритмов шириной вплоть до 128 бит
*/
#ifndef H_CRC_CATALOG
#define H_CRC_CATALOG
#include "crc/internal/catalog_ex.h"
#include "crc/internal/types.h"
/* clang-format off */
/*                              Width              Poly              Init RefIn RefOut         XorOut               Check            Residue */
"""

END = r"""#endif /* H_CRC_CATALOG */
"""

flag128 = False
with open('include/crc/catalog.h', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#if CRC_HAS_128BIT_ALGO\n')

        f.write(algo.str_c())

    if flag128:
        f.write('#endif /* CRC_HAS_128BIT_ALGO */\n')

    f.write(END)

################################################################################
#                              Create crc_test.c                              #
################################################################################
TEST_BEGIN = r"""#include "crc_test.h"

int errors = 0;
int passed = 0;
int percents;

int main(void) {
    printf("test libcrc ver." CRC_VERSION_STRING "\n");
"""

TEST_END = r"""
    percents = 100 * passed / (passed + errors);
    printf("[%d%%] tests passed, %d errors\n", percents, errors);

    return 0;
}
"""

flag128 = False
with open('test/crc_test.c', 'w+', encoding='utf-8', newline='\n') as f:
    f.write(TEST_BEGIN)

    for algo in test_algos:
        if algo.actual_width == 128 and not flag128:
            flag128 = True
            f.write('\n#if CRC_HAS_128BIT_ALGO\n')

        f.write(algo.str_test())

    if flag128:
        f.write('#endif\n')

    f.write(TEST_END)
